I"-)<p>具体实现是在<code class="highlighter-rouge">AbstractNioMessageChannel#read()</code></p>

<blockquote>
  <p>服务端负责获取新连接并且处理。所以实现方法是在AbstractNioMessageChannel中</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre>  <span class="nd">@Override</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">read</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">try</span> <span class="o">{</span>
     <span class="c1">// ...新连接检测+封装NioSocketChannel</span>

      <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">readBuf</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="o">;</span> <span class="n">i</span> <span class="o">++)</span> <span class="o">{</span>
          <span class="n">readPending</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
          <span class="n">pipeline</span><span class="o">.</span><span class="na">fireChannelRead</span><span class="o">(</span><span class="n">readBuf</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
      <span class="o">}</span>
    <span class="o">...</span><span class="c1">//TODO.</span>
  <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<ul>
  <li>【4】见<a href="http://jinlipool.com/2019/02/03/netty-4-1-1-NioSocketChannel-construct/">【4-1-1.Netty源码:新连接NioSocketChannel 初始化】</a></li>
  <li>
    <p>【7-10]具体实现是在ServerBootStrap中的<code class="highlighter-rouge">channelRead(ChannelHandlerContext ctx, Object msg)</code></p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="rouge-code"><pre>  <span class="c1">//ServerBootStrap.java</span>
   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">channelRead</span><span class="o">(</span><span class="nc">ChannelHandlerContext</span> <span class="n">ctx</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
    <span class="kd">final</span> <span class="nc">Channel</span> <span class="n">child</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Channel</span><span class="o">)</span> <span class="n">msg</span><span class="o">;</span>

    <span class="n">child</span><span class="o">.</span><span class="na">pipeline</span><span class="o">().</span><span class="na">addLast</span><span class="o">(</span><span class="n">childHandler</span><span class="o">);</span>

    <span class="n">setChannelOptions</span><span class="o">(</span><span class="n">child</span><span class="o">,</span> <span class="n">childOptions</span><span class="o">,</span> <span class="n">logger</span><span class="o">);</span>

    <span class="k">for</span> <span class="o">(</span><span class="nc">Entry</span><span class="o">&lt;</span><span class="nc">AttributeKey</span><span class="o">&lt;?&gt;,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="nl">e:</span> <span class="n">childAttrs</span><span class="o">)</span> <span class="o">{</span>
      <span class="n">child</span><span class="o">.</span><span class="na">attr</span><span class="o">((</span><span class="nc">AttributeKey</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">&gt;)</span> <span class="n">e</span><span class="o">.</span><span class="na">getKey</span><span class="o">()).</span><span class="na">set</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getValue</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="k">try</span> <span class="o">{</span>
      <span class="n">childGroup</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="n">child</span><span class="o">).</span><span class="na">addListener</span><span class="o">(</span><span class="k">new</span> <span class="nc">ChannelFutureListener</span><span class="o">()</span> <span class="o">{</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">operationComplete</span><span class="o">(</span><span class="nc">ChannelFuture</span> <span class="n">future</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
          <span class="k">if</span> <span class="o">(!</span><span class="n">future</span><span class="o">.</span><span class="na">isSuccess</span><span class="o">())</span> <span class="o">{</span>
              <span class="n">forceClose</span><span class="o">(</span><span class="n">child</span><span class="o">,</span> <span class="n">future</span><span class="o">.</span><span class="na">cause</span><span class="o">());</span>
          <span class="o">}</span>
        <span class="o">}</span>
      <span class="o">});</span>
    <span class="o">}</span>
    <span class="o">...</span>
  <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>

    <blockquote>
      <p>方法中的<code class="highlighter-rouge">childHandler</code>,<code class="highlighter-rouge">childAttrs</code>,<code class="highlighter-rouge">childOptions</code>,<code class="highlighter-rouge">childGroup</code>的这些值是来自于(NioServerSocketChannel初始化的时候,服务端channel的pipline上增加了<code class="highlighter-rouge">ServerBootstrapAcceptor</code>适配器，这些变量被包装在其中。见【2-1-2.Netty源码:注册服务端channel】，然后逐层传播到现在的channelRead方法中</p>
    </blockquote>

    <ul>
      <li>【4】给新连接添加childHandler，这里添加的childHandler是服务端demo启动的时候childHandler中的<code class="highlighter-rouge">ChannelInitializer</code>,这个里面是用户自己定义的handler集合</li>
      <li>【6-10】给新连接设置childOptions和childAttrs</li>
      <li>
        <p>【13】<code class="highlighter-rouge">childGroup</code>中选择一个NioEventLoop并且注册</p>

        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="c1">//MultithreadEventLoopGroup.class</span>
<span class="kd">public</span> <span class="nc">EventLoop</span> <span class="nf">next</span><span class="o">()</span> <span class="o">{</span>
  <span class="k">return</span> <span class="o">(</span><span class="nc">EventLoop</span><span class="o">)</span> <span class="kd">super</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="nc">ChannelFuture</span> <span class="nf">register</span><span class="o">(</span><span class="nc">Channel</span> <span class="n">channel</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">//选用事件执行器中的一个线程</span>
    <span class="k">return</span> <span class="nf">next</span><span class="o">().</span><span class="na">register</span><span class="o">(</span><span class="n">channel</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div>        </div>

        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="c1">//MultithreadEventExecutorGroup.class</span>
 <span class="kd">public</span> <span class="nc">EventExecutor</span> <span class="nf">next</span><span class="o">()</span> <span class="o">{</span>
  <span class="k">return</span> <span class="n">chooser</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div>        </div>
        <p>这个<code class="highlighter-rouge">chooser</code>是NioEventLoopGroup初始化时候构建的，见【1-1.Netty源码:NioEventLoopGroup构造方法】，通过chooser拿到NioEventLoop并且进行注册，注册方法见<a href="http://jinlipool.com/2019/01/29/netty-2-1-2-server-channel-register/">【2-1-2.Netty源码:注册服务端channel】</a>,跟服务器端注册类似。</p>

        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre> <span class="kd">private</span> <span class="kt">void</span> <span class="nf">register0</span><span class="o">(</span><span class="nc">ChannelPromise</span> <span class="n">promise</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">try</span> <span class="o">{</span>
    <span class="o">....</span>
    <span class="c1">//真正注册地方 channel注册到selector</span>
    <span class="n">doRegister</span><span class="o">();</span>
    <span class="n">neverRegistered</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
    <span class="n">registered</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">...</span>
  <span class="o">}</span> 
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

:ET