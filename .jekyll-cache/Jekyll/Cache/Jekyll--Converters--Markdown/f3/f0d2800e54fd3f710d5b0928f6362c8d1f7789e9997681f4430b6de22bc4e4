I"UJ<p>通过一个例子来展开说明</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyChannelInitializer</span> <span class="kd">extends</span> <span class="nc">ChannelInitializer</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">initChannel</span><span class="o">(</span><span class="nc">Channel</span> <span class="n">channel</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">channel</span><span class="o">.</span><span class="na">pipeline</span><span class="o">().</span><span class="na">addLast</span><span class="o">(</span><span class="s">"myHandler"</span><span class="o">,</span> <span class="k">new</span> <span class="nc">MyHandler</span><span class="o">());</span>
    <span class="o">}</span>
 <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h3 id="addlast">addLast()</h3>
<p>用户一般使用addLast()方法增加自定义handler</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="rouge-code"><pre><span class="c1">//DefaultChannelPipeLine.java</span>
<span class="kd">public</span> <span class="kd">final</span> <span class="nc">ChannelPipeline</span> <span class="nf">addLast</span><span class="o">(</span><span class="nc">EventExecutorGroup</span> <span class="n">group</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="nc">ChannelHandler</span> <span class="n">handler</span><span class="o">)</span> <span class="o">{</span>
  <span class="kd">final</span> <span class="nc">AbstractChannelHandlerContext</span> <span class="n">newCtx</span><span class="o">;</span>
  <span class="kd">synchronized</span> <span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">{</span>
  
    <span class="n">checkMultiplicity</span><span class="o">(</span><span class="n">handler</span><span class="o">);</span>
    
    <span class="n">newCtx</span> <span class="o">=</span> <span class="n">newContext</span><span class="o">(</span><span class="n">group</span><span class="o">,</span> <span class="n">filterName</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">handler</span><span class="o">),</span> <span class="n">handler</span><span class="o">);</span>
    
    <span class="n">addLast0</span><span class="o">(</span><span class="n">newCtx</span><span class="o">);</span>

    <span class="k">if</span> <span class="o">(!</span><span class="n">registered</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">newCtx</span><span class="o">.</span><span class="na">setAddPending</span><span class="o">();</span>
        <span class="n">callHandlerCallbackLater</span><span class="o">(</span><span class="n">newCtx</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nc">EventExecutor</span> <span class="n">executor</span> <span class="o">=</span> <span class="n">newCtx</span><span class="o">.</span><span class="na">executor</span><span class="o">();</span>
    <span class="k">if</span> <span class="o">(!</span><span class="n">executor</span><span class="o">.</span><span class="na">inEventLoop</span><span class="o">())</span> <span class="o">{</span>
      <span class="n">newCtx</span><span class="o">.</span><span class="na">setAddPending</span><span class="o">();</span>
      <span class="n">executor</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="nc">Runnable</span><span class="o">()</span> <span class="o">{</span>
          <span class="nd">@Override</span>
          <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
              <span class="n">callHandlerAdded0</span><span class="o">(</span><span class="n">newCtx</span><span class="o">);</span>
          <span class="o">}</span>
      <span class="o">});</span>
      <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
    <span class="o">}</span>
  <span class="o">}</span>
  <span class="n">callHandlerAdded0</span><span class="o">(</span><span class="n">newCtx</span><span class="o">);</span>
  <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<ul>
  <li>【4】检查是否重复添加handle
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre>    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">checkMultiplicity</span><span class="o">(</span><span class="nc">ChannelHandler</span> <span class="n">handler</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">if</span> <span class="o">(</span><span class="n">handler</span> <span class="k">instanceof</span> <span class="nc">ChannelHandlerAdapter</span><span class="o">)</span> <span class="o">{</span>
          <span class="nc">ChannelHandlerAdapter</span> <span class="n">h</span> <span class="o">=</span> <span class="o">(</span><span class="nc">ChannelHandlerAdapter</span><span class="o">)</span> <span class="n">handler</span><span class="o">;</span>
          <span class="k">if</span> <span class="o">(!</span><span class="n">h</span><span class="o">.</span><span class="na">isSharable</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">h</span><span class="o">.</span><span class="na">added</span><span class="o">)</span> <span class="o">{</span>
              <span class="k">throw</span> <span class="k">new</span> <span class="nf">ChannelPipelineException</span><span class="o">(</span><span class="err">。。。</span><span class="o">);</span>
          <span class="o">}</span>
          <span class="n">h</span><span class="o">.</span><span class="na">added</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
      <span class="o">}</span>
  <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <p>判断用户添加的ChannelHandler是否重复添加的最直接方法就是判断是否非共享(被Sharable注解标注)并且被添加过就抛出重复的异常。否则继续后面步骤并且标记添加状态为true</p>
  </li>
  <li>
    <p>【8】 为这个ChannelHandler构建一个ChannelHandlerContext，一个ChannelHandler对应一个ChannelHandleContext</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre> <span class="c1">//DefaultChannelHandlerContext.java</span>
 <span class="nc">DefaultChannelHandlerContext</span><span class="o">(</span>
     <span class="nc">DefaultChannelPipeline</span> <span class="n">pipeline</span><span class="o">,</span> <span class="nc">EventExecutor</span> <span class="n">executor</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="nc">ChannelHandler</span> <span class="n">handler</span><span class="o">)</span> <span class="o">{</span>
   <span class="kd">super</span><span class="o">(</span><span class="n">pipeline</span><span class="o">,</span> <span class="n">executor</span><span class="o">,</span> <span class="n">name</span><span class="o">,</span> <span class="n">isInbound</span><span class="o">(</span><span class="n">handler</span><span class="o">),</span> <span class="n">isOutbound</span><span class="o">(</span><span class="n">handler</span><span class="o">));</span>
   <span class="o">...</span>
   <span class="k">this</span><span class="o">.</span><span class="na">handler</span> <span class="o">=</span> <span class="n">handler</span><span class="o">;</span>
 <span class="o">}</span>
    
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <ul>
      <li>【4】在<code class="highlighter-rouge">isInbound(handler)</code>, <code class="highlighter-rouge">isOutbound(handler)</code>来判断是入栈处理器还是出栈处理器，然后作为参数传入。super方法比较简单，就是在<code class="highlighter-rouge">DefaultChannelHandlerContext</code>类中调用父类的构造方法。构造方法里面给一些成员变量赋值，</li>
    </ul>
  </li>
  <li>【10】添加到链表
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="c1">//DefaultChannelPipeline.java</span>
<span class="kd">private</span> <span class="kt">void</span> <span class="nf">addLast0</span><span class="o">(</span><span class="nc">AbstractChannelHandlerContext</span> <span class="n">newCtx</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">AbstractChannelHandlerContext</span> <span class="n">prev</span> <span class="o">=</span> <span class="n">tail</span><span class="o">.</span><span class="na">prev</span><span class="o">;</span>
    <span class="n">newCtx</span><span class="o">.</span><span class="na">prev</span> <span class="o">=</span> <span class="n">prev</span><span class="o">;</span>
    <span class="n">newCtx</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">tail</span><span class="o">;</span>
    <span class="n">prev</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">newCtx</span><span class="o">;</span>
    <span class="n">tail</span><span class="o">.</span><span class="na">prev</span> <span class="o">=</span> <span class="n">newCtx</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <ul>
      <li>标准的双向链表操作。把新创建的AbstractChannelHandlerContext对象加入到链表中。方法虽然叫addLast，但是tail永远是在最后一个节点，新加入的节点都会放在tail节点的前一个位置。</li>
    </ul>
  </li>
  <li>
    <p>【30】用户自定编写的handler对象有个<code class="highlighter-rouge">handlerAdded</code>方法，所以这个顺序是，Pipeline创建后，生成AbstractChannelHandlerContext<code class="highlighter-rouge">并且添加到Pipeline中，最后这个回调方法调用(第一个被调用到的回调方法)，将handler对象添加到</code>AbstractChannelHandlerContext`这个对象中</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">callHandlerAdded0</span><span class="o">(</span><span class="kd">final</span> <span class="nc">AbstractChannelHandlerContext</span> <span class="n">ctx</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">ctx</span><span class="o">.</span><span class="na">setAddComplete</span><span class="o">();</span>
    <span class="n">ctx</span><span class="o">.</span><span class="na">handler</span><span class="o">().</span><span class="na">handlerAdded</span><span class="o">(</span><span class="n">ctx</span><span class="o">);</span>
    <span class="o">...</span>
  <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
</ul>

<p>Pipeline是一个容器，它里面存放多个handler，更准确的说法是Pipeline是一个容器，它里面存放的是多个channelHandlerContext对象，而channelHandlerContext里面是对应的channelHandler对象，chanelHandlerContext是netty帮你创建的。</p>

<hr />
<h3 id="channelinitializer">ChannelInitializer</h3>

<p>channel被注册的时候<code class="highlighter-rouge">initChannel</code>被调用，当这个方法返回的时候，这个实例会从Channel的ChannelPipeline中移除.
删除的原因是：无论是用户自己定义的类去继承<code class="highlighter-rouge">ChannelInitializer</code>，还是直接实例化出来的<code class="highlighter-rouge">ChannelInitializer</code>对象。主要的作用是将多个正真有用的多个处理器一次性添加到Pipeline中。所以<code class="highlighter-rouge">ChannelInitializer</code>对象本身并不算是个handler，在添加完有用的处理器后结束使命，就可以被移除了。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="c1">//ChannelInitializer.java</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">handlerAdded</span><span class="o">(</span><span class="nc">ChannelHandlerContext</span> <span class="n">ctx</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">ctx</span><span class="o">.</span><span class="na">channel</span><span class="o">().</span><span class="na">isRegistered</span><span class="o">())</span> <span class="o">{</span>
        <span class="n">initChannel</span><span class="o">(</span><span class="n">ctx</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p><code class="highlighter-rouge">initChannel</code>方法触发是在<code class="highlighter-rouge">handlerAdded</code>中，也就是说<code class="highlighter-rouge">ChannelInitializer</code>所属的<code class="highlighter-rouge">ChannelHandlerContext</code>对象被添加到Pipeline中后被触发。</p>

<p><code class="highlighter-rouge">initChannel具体实现</code></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="c1">//ChannelInitializer.java</span>
<span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">initChannel</span><span class="o">(</span><span class="nc">ChannelHandlerContext</span> <span class="n">ctx</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
  <span class="k">if</span> <span class="o">(</span><span class="n">initMap</span><span class="o">.</span><span class="na">putIfAbsent</span><span class="o">(</span><span class="n">ctx</span><span class="o">,</span> <span class="nc">Boolean</span><span class="o">.</span><span class="na">TRUE</span><span class="o">)</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">try</span> <span class="o">{</span>
          <span class="n">initChannel</span><span class="o">((</span><span class="no">C</span><span class="o">)</span> <span class="n">ctx</span><span class="o">.</span><span class="na">channel</span><span class="o">());</span>
      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Throwable</span> <span class="n">cause</span><span class="o">)</span> <span class="o">{</span>
          <span class="n">exceptionCaught</span><span class="o">(</span><span class="n">ctx</span><span class="o">,</span> <span class="n">cause</span><span class="o">);</span>
      <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
          <span class="n">remove</span><span class="o">(</span><span class="n">ctx</span><span class="o">);</span>
      <span class="o">}</span>
      <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
  <span class="o">}</span>
  <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>【5】执行回调，就是执行写在<code class="highlighter-rouge">initChannel</code>方法里面的那些操作。
【9】删除<code class="highlighter-rouge">ChannelPipeline</code>这个实例</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre>   <span class="kd">private</span> <span class="kt">void</span> <span class="nf">remove</span><span class="o">(</span><span class="nc">ChannelHandlerContext</span> <span class="n">ctx</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">try</span> <span class="o">{</span>
        <span class="nc">ChannelPipeline</span> <span class="n">pipeline</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">pipeline</span><span class="o">();</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">pipeline</span><span class="o">.</span><span class="na">context</span><span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">pipeline</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
  <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<ul>
  <li>【4-6】如果pipeline中指定channelHandler所属的的上下文对象不为空，就从pipeline中删除这个当前对象删除。</li>
</ul>

:ET