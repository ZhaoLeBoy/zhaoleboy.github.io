I"V<p>Netty中任务分普通任务<code class="highlighter-rouge">Runable</code>和定时任务<code class="highlighter-rouge">ScheduledFutureTask</code>。分别对应两种队列<code class="highlighter-rouge">Queue</code>和<code class="highlighter-rouge">PriorityQueue</code></p>

<h3 id="任务添加">任务添加</h3>

<h4 id="1普通任务添加">1.普通任务添加</h4>

<blockquote>
  <p>再SingleThreadEventExecutor#execute中进行 addTask</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre> <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">addTask</span><span class="o">(</span><span class="nc">Runnable</span> <span class="n">task</span><span class="o">)</span> <span class="o">{</span>
    <span class="o">...</span>
    <span class="c1">//taskQeue添加task</span>
    <span class="k">if</span> <span class="o">(!</span><span class="n">offerTask</span><span class="o">(</span><span class="n">task</span><span class="o">))</span> <span class="o">{</span>
      <span class="n">reject</span><span class="o">(</span><span class="n">task</span><span class="o">);</span>
    <span class="o">}</span>
  <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="2定时任务添加">2.定时任务添加</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="c1">//客户端连接代码</span>
<span class="o">..</span>
<span class="n">bootstrap</span><span class="o">.</span><span class="na">config</span><span class="o">().</span><span class="na">group</span><span class="o">().</span><span class="na">schedule</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">connect</span><span class="o">(</span><span class="n">bootstrap</span><span class="o">,</span> <span class="n">host</span><span class="o">,</span> <span class="n">port</span><span class="o">,</span> <span class="n">retry</span> <span class="o">-</span> <span class="mi">1</span><span class="o">),</span> <span class="n">delay</span><span class="o">,</span> <span class="nc">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">);</span>
<span class="o">...</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="nd">@Override</span>
<span class="kd">public</span> <span class="nc">ScheduledFuture</span><span class="o">&lt;?&gt;</span> <span class="n">schedule</span><span class="o">(</span><span class="nc">Runnable</span> <span class="n">command</span><span class="o">,</span> <span class="kt">long</span> <span class="n">delay</span><span class="o">,</span> <span class="nc">TimeUnit</span> <span class="n">unit</span><span class="o">)</span> <span class="o">{</span>
    <span class="o">...</span>
    <span class="k">return</span> <span class="nf">schedule</span><span class="o">(</span><span class="k">new</span> <span class="nc">ScheduledFutureTask</span><span class="o">&lt;</span><span class="nc">Void</span><span class="o">&gt;(</span>
            <span class="k">this</span><span class="o">,</span> <span class="n">command</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="nc">ScheduledFutureTask</span><span class="o">.</span><span class="na">deadlineNanos</span><span class="o">(</span><span class="n">unit</span><span class="o">.</span><span class="na">toNanos</span><span class="o">(</span><span class="n">delay</span><span class="o">))));</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>
    <p>【4-5】把一个定时任务封装为ScheduledFutureTask，然后调用schedule添加到队列中。重写了<code class="highlighter-rouge">compareTo</code>方法.</p>

    <blockquote>
      <p>重写了compareTo方法，截止时间小的向前排，截止时间相同的先入队列的排在前面</p>
    </blockquote>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="rouge-code"><pre>  <span class="nd">@Override</span>
  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compareTo</span><span class="o">(</span><span class="nc">Delayed</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="k">this</span> <span class="o">==</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="nc">ScheduledFutureTask</span><span class="o">&lt;?&gt;</span> <span class="n">that</span> <span class="o">=</span> <span class="o">(</span><span class="nc">ScheduledFutureTask</span><span class="o">&lt;?&gt;)</span> <span class="n">o</span><span class="o">;</span>
    <span class="kt">long</span> <span class="n">d</span> <span class="o">=</span> <span class="n">deadlineNanos</span><span class="o">()</span> <span class="o">-</span> <span class="n">that</span><span class="o">.</span><span class="na">deadlineNanos</span><span class="o">();</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">d</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">d</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">id</span> <span class="o">&lt;</span> <span class="n">that</span><span class="o">.</span><span class="na">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">id</span> <span class="o">==</span> <span class="n">that</span><span class="o">.</span><span class="na">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">Error</span><span class="o">();</span>
    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
        <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
    <span class="o">}</span>
  <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <p>调用<code class="highlighter-rouge">schedule</code>添加到定时任务队列</p>
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="o">&lt;</span><span class="no">V</span><span class="o">&gt;</span> <span class="nc">ScheduledFuture</span><span class="o">&lt;</span><span class="no">V</span><span class="o">&gt;</span> <span class="nf">schedule</span><span class="o">(</span><span class="kd">final</span> <span class="nc">ScheduledFutureTask</span><span class="o">&lt;</span><span class="no">V</span><span class="o">&gt;</span> <span class="n">task</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">if</span> <span class="o">(</span><span class="n">inEventLoop</span><span class="o">())</span> <span class="o">{</span>
    <span class="n">scheduledTaskQueue</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="n">task</span><span class="o">);</span>
  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
    <span class="n">execute</span><span class="o">(</span><span class="k">new</span> <span class="nc">Runnable</span><span class="o">()</span> <span class="o">{</span>
      <span class="nd">@Override</span>
      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
          <span class="n">scheduledTaskQueue</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="n">task</span><span class="o">);</span>
      <span class="o">}</span>
    <span class="o">});</span>
  <span class="o">}</span>
    
  <span class="k">return</span> <span class="n">task</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <ul>
      <li>【2】判断是否是在eventLoop线程中，</li>
      <li>
        <p>【5-10】如果不是eventLoop继续把添加定时任务作为一个task扔到线程执行器中执行，保证线程安全。</p>

        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="c1">//初始化一个长度11的优先级队列</span>
<span class="nc">PriorityQueue</span><span class="o">&lt;</span><span class="nc">ScheduledFutureTask</span><span class="o">&lt;?&gt;&gt;</span> <span class="n">scheduledTaskQueue</span><span class="o">;</span>
<span class="o">..</span>
<span class="nc">PriorityQueue</span><span class="o">&lt;</span><span class="nc">ScheduledFutureTask</span><span class="o">&lt;?&gt;&gt;</span> <span class="n">scheduledTaskQueue</span><span class="o">()</span> <span class="o">{</span>
<span class="k">if</span> <span class="o">(</span><span class="n">scheduledTaskQueue</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">scheduledTaskQueue</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DefaultPriorityQueue</span><span class="o">&lt;</span><span class="nc">ScheduledFutureTask</span><span class="o">&lt;?&gt;&gt;(</span>
    <span class="no">SCHEDULED_FUTURE_TASK_COMPARATOR</span><span class="o">,</span> <span class="mi">11</span><span class="o">);</span>
<span class="o">}</span>
  <span class="k">return</span> <span class="n">scheduledTaskQueue</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<h3 id="处理任务">处理任务</h3>

<blockquote>
  <p>具体是在NioEventLoop#run方法中调用<code class="highlighter-rouge"> runAllTasks(long timeoutNanos)</code>开始处理这些任务,具体实现是在<code class="highlighter-rouge">SingleThreadEventExecutor</code>实现。</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre></td><td class="rouge-code"><pre>  <span class="kd">protected</span> <span class="kt">boolean</span> <span class="nf">runAllTasks</span><span class="o">(</span><span class="kt">long</span> <span class="n">timeoutNanos</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">fetchFromScheduledTaskQueue</span><span class="o">();</span>
    <span class="nc">Runnable</span> <span class="n">task</span> <span class="o">=</span> <span class="n">pollTask</span><span class="o">();</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">task</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">afterRunningAllTasks</span><span class="o">();</span>
        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">final</span> <span class="kt">long</span> <span class="n">deadline</span> <span class="o">=</span> <span class="nc">ScheduledFutureTask</span><span class="o">.</span><span class="na">nanoTime</span><span class="o">()</span> <span class="o">+</span> <span class="n">timeoutNanos</span><span class="o">;</span>
    <span class="kt">long</span> <span class="n">runTasks</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="kt">long</span> <span class="n">lastExecutionTime</span><span class="o">;</span>
    <span class="k">for</span> <span class="o">(;</span> <span class="o">;</span> <span class="o">)</span> <span class="o">{</span>
        <span class="c1">//执行这些任务</span>
        <span class="n">safeExecute</span><span class="o">(</span><span class="n">task</span><span class="o">);</span>

        <span class="n">runTasks</span><span class="o">++;</span>

        <span class="k">if</span> <span class="o">((</span><span class="n">runTasks</span> <span class="o">&amp;</span> <span class="mh">0x3F</span><span class="o">)</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">lastExecutionTime</span> <span class="o">=</span> <span class="nc">ScheduledFutureTask</span><span class="o">.</span><span class="na">nanoTime</span><span class="o">();</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">lastExecutionTime</span> <span class="o">&gt;=</span> <span class="n">deadline</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="n">task</span> <span class="o">=</span> <span class="n">pollTask</span><span class="o">();</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">task</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">lastExecutionTime</span> <span class="o">=</span> <span class="nc">ScheduledFutureTask</span><span class="o">.</span><span class="na">nanoTime</span><span class="o">();</span>
            <span class="k">break</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="n">afterRunningAllTasks</span><span class="o">();</span>
    <span class="k">this</span><span class="o">.</span><span class="na">lastExecutionTime</span> <span class="o">=</span> <span class="n">lastExecutionTime</span><span class="o">;</span>
    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
  <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>
    <p>【2】将定时任务从scheduleTaskQueue中抽出来 存入普通任务队列<code class="highlighter-rouge">taskQueue</code>队列中</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre>  <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">fetchFromScheduledTaskQueue</span><span class="o">()</span> <span class="o">{</span>
    <span class="kt">long</span> <span class="n">nanoTime</span> <span class="o">=</span> <span class="nc">AbstractScheduledEventExecutor</span><span class="o">.</span><span class="na">nanoTime</span><span class="o">();</span>
    <span class="nc">Runnable</span> <span class="n">scheduledTask</span> <span class="o">=</span> <span class="n">pollScheduledTask</span><span class="o">(</span><span class="n">nanoTime</span><span class="o">);</span>
    <span class="k">while</span> <span class="o">(</span><span class="n">scheduledTask</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(!</span><span class="n">taskQueue</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">scheduledTask</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">scheduledTaskQueue</span><span class="o">().</span><span class="na">add</span><span class="o">((</span><span class="nc">ScheduledFutureTask</span><span class="o">&lt;?&gt;)</span> <span class="n">scheduledTask</span><span class="o">);</span>
            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="c1">//轮训</span>
        <span class="n">scheduledTask</span> <span class="o">=</span> <span class="n">pollScheduledTask</span><span class="o">(</span><span class="n">nanoTime</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
  <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <ul>
      <li>【2-3】获取一个当前纳秒时间,去获取定时任务
        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre> <span class="kd">protected</span> <span class="kd">final</span> <span class="nc">Runnable</span> <span class="nf">pollScheduledTask</span><span class="o">(</span><span class="kt">long</span> <span class="n">nanoTime</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">assert</span> <span class="nf">inEventLoop</span><span class="o">();</span>
    <span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">ScheduledFutureTask</span><span class="o">&lt;?&gt;&gt;</span> <span class="n">scheduledTaskQueue</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">scheduledTaskQueue</span><span class="o">;</span>
  
    <span class="nc">ScheduledFutureTask</span><span class="o">&lt;?&gt;</span> <span class="n">scheduledTask</span> <span class="o">=</span> <span class="n">scheduledTaskQueue</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span> <span class="kc">null</span> <span class="o">:</span> <span class="n">scheduledTaskQueue</span><span class="o">.</span><span class="na">peek</span><span class="o">();</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">scheduledTask</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">scheduledTask</span><span class="o">.</span><span class="na">deadlineNanos</span><span class="o">()</span> <span class="o">&lt;=</span> <span class="n">nanoTime</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">scheduledTaskQueue</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">scheduledTask</span><span class="o">;</span>
    <span class="o">}</span>
          
    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div>        </div>
        <ul>
          <li>【9-10】如果定时任务截止时间小于当前时间 说明时间到了 需要拿出来处理，拿出来处理的同时从队列中删除，如果没有的话 就不用处理</li>
        </ul>
      </li>
      <li>【5-8】添加定时任务到<code class="highlighter-rouge">taskQueue</code>队列（ScheduledFutureTask实现了Runable接口），如果添加定时任务到队列失败了 需要吧这个任务放回到定时任务队列中继续等下次处理。</li>
      <li>【10】重复步骤，直到符合条件的定时任务全部取出来并且放入到<code class="highlighter-rouge">taskQueue</code>中</li>
    </ul>
  </li>
  <li>【3】从taskQueue里面取任务执行</li>
  <li>【5】其实是调用runAllTasksFrom 执行收尾任务操作 (<code class="highlighter-rouge">tailTasks</code>从哪来的？？？？？？)</li>
  <li>【9】计算下任务截止时间 不能超过传入的<code class="highlighter-rouge">timeoutNanos</code>时间</li>
  <li>【14】执行任务，内部就是直接调用<code class="highlighter-rouge">run</code>方法</li>
  <li>【16-23】记录下执行的任务次数,每64次判断下当前时间是否超过截止时间,如果当前任务时间超过截止时间，官方说明是生成nanoTime比较耗时。要以固定频率判断下。</li>
</ul>

:ET