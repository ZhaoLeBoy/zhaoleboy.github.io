I"X<p>主要就是对Netty中的Future和ChannelFuture的文档大概翻译一下，Netty的文档写的比较详细，认真看下来也是收获颇多。
Netty中也有个Future接口，在<code class="highlighter-rouge">io.netty.util.concurrent</code>包中。
jdk自带的Future接口是在<code class="highlighter-rouge">java.utail.concurrent</code>。</p>

<p>先上ChannelFuture,Future和jdk的Future的关系图
<img src="/img/netty/extend/channelfuture/1.jpg" alt="IMAGE" /></p>

<h3 id="javautailconcurrentfuture">java.utail.concurrent.Future</h3>

<blockquote>
  <p>文档说明</p>
</blockquote>

<p>Future表示异步计算的结果，Future中提供一些方法用来检测计算是否完成，等待计算完成，获取计算方法的方法等。
计算完成只能通过<code class="highlighter-rouge">get</code> 获取。get是阻塞的，直到计算完成。取消操作是<code class="highlighter-rouge">cancel</code>完成，Future提供额外的方法来
判断任务是正常完成还是取消掉了，如果计算一旦完成就不能被取消。如果想使用Future去取消任务的目的但是没有
提供可用的结果，可以声明Future&lt;?&gt; 返回一个null 来表示底层的结构</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre><span class="kd">interface</span> <span class="nc">ArchiveSearcher</span> <span class="o">{</span> <span class="nc">String</span> <span class="nf">search</span><span class="o">(</span><span class="nc">String</span> <span class="n">target</span><span class="o">);</span> <span class="o">}</span>
<span class="kd">class</span> <span class="nc">App</span> <span class="o">{</span>
  <span class="nc">ExecutorService</span> <span class="n">executor</span> <span class="o">=</span> <span class="o">...</span>
  <span class="nc">ArchiveSearcher</span> <span class="n">searcher</span> <span class="o">=</span> <span class="o">...</span>
  <span class="kt">void</span> <span class="nf">showSearch</span><span class="o">(</span><span class="kd">final</span> <span class="nc">String</span> <span class="n">target</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">InterruptedException</span> <span class="o">{</span>
    <span class="nc">Future</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">future</span> <span class="o">=</span> <span class="n">executor</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span><span class="k">new</span> <span class="nc">Callable</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;()</span> <span class="o">{</span>
      <span class="kd">public</span> <span class="nc">String</span> <span class="nf">call</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">searcher</span><span class="o">.</span><span class="na">search</span><span class="o">(</span><span class="n">target</span><span class="o">);</span>
      <span class="o">}});</span>
    <span class="n">displayOtherThings</span><span class="o">();</span> <span class="c1">// do other things while searching</span>
    <span class="k">try</span> <span class="o">{</span>
      <span class="n">displayText</span><span class="o">(</span><span class="n">future</span><span class="o">.</span><span class="na">get</span><span class="o">());</span> <span class="c1">// use future</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">ExecutionException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span> <span class="n">cleanup</span><span class="o">();</span> <span class="k">return</span><span class="o">;</span> <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>FutureTask类是Future的一个实现类，他继承了Runable，所以Executor可以执行FutureTask
上面代码优化如下</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="nc">FutureTask</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">future</span> <span class="o">=</span>
  <span class="k">new</span> <span class="nc">FutureTask</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;(</span><span class="k">new</span> <span class="nc">Callable</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;()</span> <span class="o">{</span>
      <span class="kd">public</span> <span class="nc">String</span> <span class="nf">call</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">searcher</span><span class="o">.</span><span class="na">search</span><span class="o">(</span><span class="n">target</span><span class="o">);</span>
    <span class="o">}});</span>
  <span class="n">executor</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">future</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>内存一致性的影响：由异步计算异步计算的行为一定在另个线程future.get结果返回之前发生的。</p>

<blockquote>
  <p>内部方法</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="kt">boolean</span> <span class="nf">cancel</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">mayInterruptIfRunning</span><span class="o">);</span>
<span class="kt">boolean</span> <span class="nf">isCancelled</span><span class="o">();</span>
<span class="kt">boolean</span> <span class="nf">isDone</span><span class="o">();</span>
<span class="no">V</span> <span class="nf">get</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">InterruptedException</span><span class="o">,</span> <span class="nc">ExecutionException</span><span class="o">;</span>
<span class="no">V</span> <span class="nf">get</span><span class="o">(</span><span class="kt">long</span> <span class="n">timeout</span><span class="o">,</span> <span class="nc">TimeUnit</span> <span class="n">unit</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">InterruptedException</span><span class="o">,</span> <span class="nc">ExecutionException</span><span class="o">,</span> <span class="nc">TimeoutException</span><span class="o">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="ionettyutilconcurrentfuture">io.netty.util.concurrent.Future</h3>

<blockquote>
  <p>文档说明</p>
</blockquote>

<p>异步操作的结果，是在jdk自带的future接口之上进行方法扩展。</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
</pre></td><td class="rouge-code"><pre><span class="c1">//如果并只能如果io操作完成才会返回true</span>
<span class="kt">boolean</span> <span class="nf">isSuccess</span><span class="o">();</span>

<span class="c1">// 只有当操作可以通过cancel(boolean)返回true才返回true</span>
<span class="kt">boolean</span> <span class="nf">isCancellable</span><span class="o">();</span>

<span class="c1">// 如果io失败返回原因</span>
<span class="nc">Throwable</span> <span class="nf">cause</span><span class="o">();</span>

<span class="c1">// future中添加了指定的监听，当future的isDone()完成就会收到通知，(观察者模式)</span>
<span class="nc">Future</span><span class="o">&lt;</span><span class="no">V</span><span class="o">&gt;</span> <span class="nf">addListener</span><span class="o">(</span><span class="nc">GenericFutureListener</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="nc">Future</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="no">V</span><span class="o">&gt;&gt;</span> <span class="n">listener</span><span class="o">);</span>
<span class="nc">Future</span><span class="o">&lt;</span><span class="no">V</span><span class="o">&gt;</span> <span class="nf">addListeners</span><span class="o">(</span><span class="nc">GenericFutureListener</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="nc">Future</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="no">V</span><span class="o">&gt;&gt;...</span> <span class="n">listeners</span><span class="o">);</span>

<span class="c1">//移除监听器</span>
<span class="nc">Future</span><span class="o">&lt;</span><span class="no">V</span><span class="o">&gt;</span> <span class="nf">removeListener</span><span class="o">(</span><span class="nc">GenericFutureListener</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="nc">Future</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="no">V</span><span class="o">&gt;&gt;</span> <span class="n">listener</span><span class="o">);</span>
<span class="nc">Future</span><span class="o">&lt;</span><span class="no">V</span><span class="o">&gt;</span> <span class="nf">removeListeners</span><span class="o">(</span><span class="nc">GenericFutureListener</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="nc">Future</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="no">V</span><span class="o">&gt;&gt;...</span> <span class="n">listeners</span><span class="o">);</span>

<span class="c1">// 等待future 直到完成。如果失败则抛出异常</span>
<span class="nc">Future</span><span class="o">&lt;</span><span class="no">V</span><span class="o">&gt;</span> <span class="nf">sync</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">InterruptedException</span><span class="o">;</span>
<span class="nc">Future</span><span class="o">&lt;</span><span class="no">V</span><span class="o">&gt;</span> <span class="nf">syncUninterruptibly</span><span class="o">();</span>

<span class="c1">// 等待future完成</span>
<span class="nc">Future</span><span class="o">&lt;</span><span class="no">V</span><span class="o">&gt;</span> <span class="nf">await</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">InterruptedException</span><span class="o">;</span>
<span class="nc">Future</span><span class="o">&lt;</span><span class="no">V</span><span class="o">&gt;</span> <span class="nf">awaitUninterruptibly</span><span class="o">();</span>

<span class="c1">//等待fure完成</span>
<span class="kt">boolean</span> <span class="nf">await</span><span class="o">(</span><span class="kt">long</span> <span class="n">timeout</span><span class="o">,</span> <span class="nc">TimeUnit</span> <span class="n">unit</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">InterruptedException</span><span class="o">;</span>
<span class="kt">boolean</span> <span class="nf">await</span><span class="o">(</span><span class="kt">long</span> <span class="n">timeoutMillis</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">InterruptedException</span><span class="o">;</span>
<span class="kt">boolean</span> <span class="nf">awaitUninterruptibly</span><span class="o">(</span><span class="kt">long</span> <span class="n">timeout</span><span class="o">,</span> <span class="nc">TimeUnit</span> <span class="n">unit</span><span class="o">);</span>
<span class="kt">boolean</span> <span class="nf">awaitUninterruptibly</span><span class="o">(</span><span class="kt">long</span> <span class="n">timeoutMillis</span><span class="o">);</span>

<span class="c1">//如果没有被堵塞直接返回结果，如果future没有完成 就返回null</span>
<span class="c1">//如果null被表示结果为成功，你需要坚持结果是否真的完成 使用isDone，最好不要依赖null返回结果</span>
<span class="no">V</span> <span class="nf">getNow</span><span class="o">();</span>

<span class="nd">@Override</span>
<span class="kt">boolean</span> <span class="nf">cancel</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">mayInterruptIfRunning</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<hr />
<h3 id="ionettychannelchannelfuture">io.netty.channel.ChannelFuture</h3>
<p>异步Channel的io操作的结果</p>

<blockquote>
  <p>文档说明</p>
</blockquote>

<p>在Netty中所有的IO操作都是异步的，意味着任何io调用都会立刻返回，并不能保证所请求的io操作在调用结束后
 会返回，相反，你会获取一个ChannelFuture 它会返回关于io操作的结果或者信息。
一个ChannelFuturen要不是完成或者未完成，当io操作开始，Netty会创建一个新的future对象，新的future对象
是未完成，不是成功的也不是失败，也不是取消，如果io完成，要不然成功完成，失败完成要不是取消future被标
识完成，携带一些信息，如失败的原因，注意，失败和取消都是完成的状态。
<img src="/img/netty/extend/channelfuture/2.jpg" alt="IMAGE" />
提供的各种方法让你去检测io操作是否完成了，还是在等待完成，可以获取io操作的结果，允许你添加
<code class="highlighter-rouge">GenericFutureListener</code>，当io操作完成后可以收到通知.推荐使用<code class="highlighter-rouge">addListener(GenericFutureListener)</code>，不推荐使用<code class="highlighter-rouge">await()</code>。原因是<code class="highlighter-rouge">addListener(GenericFutureListener)</code>方法是非阻塞的，仅仅是将ChannelFutureListener添加到ChannelFuture中当与这个ChannelFuture关联的io操作完成时候，进行对通知。ChannelFutureListener性能好和资源利用率高，因为它什么都不会堵塞。不过如果不熟悉事件驱动模型。实现逻辑循序比较困难。</p>

<p>await是堵塞，虽然实现顺序逻辑容易单线程会堵塞，成本太高。容易出现死锁。
不要在ChannelHandler中调用await方法， ChannelHandler 中事件方法通常被io线程调用 如果await事件在事件处理方法(比如io连接的处理等)被调用，这个事件处理方法又是被io线程调用，这个io操作将一直等待 不会完成，因为await可以堵塞io操作，造成死锁。</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre><span class="c1">// BAD - NEVER DO THIS</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">channelRead</span><span class="o">({</span><span class="nd">@link</span> <span class="nc">ChannelHandlerContext</span><span class="o">}</span> <span class="n">ctx</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
 <span class="o">{</span><span class="nd">@link</span> <span class="nc">ChannelFuture</span><span class="o">}</span> <span class="n">future</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">channel</span><span class="o">().</span><span class="na">close</span><span class="o">();</span>
  <span class="n">future</span><span class="o">.</span><span class="na">awaitUninterruptibly</span><span class="o">();</span>
  <span class="c1">// Perform post-closure operation</span>
  <span class="c1">// ...</span>
<span class="o">}</span>

<span class="c1">// GOOD</span>
<span class="o">{</span><span class="nd">@code</span> <span class="nd">@Override</span><span class="o">}</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">channelRead</span><span class="o">({</span><span class="nd">@link</span> <span class="nc">ChannelHandlerContext</span><span class="o">}</span> <span class="n">ctx</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
  <span class="o">{</span><span class="nd">@link</span> <span class="nc">ChannelFuture</span><span class="o">}</span> <span class="n">future</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">channel</span><span class="o">().</span><span class="na">close</span><span class="o">();</span>
  <span class="n">future</span><span class="o">.</span><span class="na">addListener</span><span class="o">(</span><span class="k">new</span> <span class="o">{</span><span class="nd">@link</span> <span class="nc">ChannelFutureListener</span><span class="o">}()</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">operationComplete</span><span class="o">({</span><span class="nd">@link</span> <span class="nc">ChannelFuture</span><span class="o">}</span> <span class="n">future</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Perform post-closure operation</span>
        <span class="c1">// ...</span>
    <span class="o">}</span>
  <span class="o">});</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>不要在io线程中掉await 否则会抛出BlockingOperationException 防止死锁
不要将io超时 和等待超时 混淆。 ,await(long, TimeUnit),awaitUninterruptibly(long)，waitUninterruptibly(long, TimeUnit)  这些方法跟io超时没有任何关系。如果io操作超时，future会被标记失败，e.g.如果连接超时会通过一个特定传输选项进行配置</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="rouge-code"><pre><span class="c1">// BAD - NEVER DO THIS</span>
<span class="nc">Bootstrap</span>  <span class="n">b</span> <span class="o">=</span> <span class="o">...;</span>
<span class="nc">ChannelFuture</span>  <span class="n">f</span> <span class="o">=</span> <span class="n">b</span><span class="o">.</span><span class="na">connect</span><span class="o">(...);</span>
<span class="n">f</span><span class="o">.</span><span class="na">awaitUninterruptibly</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="nc">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">);</span><span class="c1">//等待超时</span>
<span class="k">if</span> <span class="o">(</span><span class="n">f</span><span class="o">.</span><span class="na">isCancelled</span><span class="o">())</span> <span class="o">{</span>
    <span class="c1">// 用户取消连接</span>
<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(!</span><span class="n">f</span><span class="o">.</span><span class="na">isSuccess</span><span class="o">())</span> <span class="o">{</span>
    <span class="c1">//你可能获取到一个NullPointerException异常，因为future并没有完成</span>
    <span class="n">f</span><span class="o">.</span><span class="na">cause</span><span class="o">().</span><span class="na">printStackTrace</span><span class="o">();</span>
<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
    <span class="c1">//连接成功</span>
<span class="o">}</span>
<span class="cm">/*
* 因为ChannelFuture是异步的，等到下面判断逻辑的的时候b.connect还不能建立的上
*，f是空，所以会得到NullPointerException
*/</span>

<span class="c1">// GOOD</span>
 <span class="nc">Bootstrap</span> <span class="n">b</span> <span class="o">=</span> <span class="o">...;</span>
<span class="c1">// 配置连接超时时间</span>
<span class="n">b</span><span class="o">.</span><span class="na">option</span><span class="o">(</span> <span class="nc">ChannelOption</span><span class="o">.</span><span class="na">CONNECT_TIMEOUT_MILLIS</span><span class="o">,</span> <span class="mi">10000</span><span class="o">);</span>
<span class="nc">ChannelFuture</span><span class="o">}</span> <span class="n">f</span> <span class="o">=</span> <span class="n">b</span><span class="o">.</span><span class="na">connect</span><span class="o">(...);</span>
<span class="n">f</span><span class="o">.</span><span class="na">awaitUninterruptibly</span><span class="o">();</span>

<span class="c1">//此时已经确定任务已经完成</span>
<span class="k">assert</span> <span class="n">f</span><span class="o">.</span><span class="na">isDone</span><span class="o">();</span>

<span class="k">if</span> <span class="o">(</span><span class="n">f</span><span class="o">.</span><span class="na">isCancelled</span><span class="o">())</span> <span class="o">{</span>
    <span class="c1">// Connection attempt cancelled by user</span>
<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(!</span><span class="n">f</span><span class="o">.</span><span class="na">isSuccess</span><span class="o">())</span> <span class="o">{</span>
    <span class="n">f</span><span class="o">.</span><span class="na">cause</span><span class="o">().</span><span class="na">printStackTrace</span><span class="o">();</span>
<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
    <span class="c1">// Connection established successfully</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
:ET