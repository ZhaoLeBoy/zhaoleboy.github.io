I"(<p><strong>概念</strong>
乐观锁认为自己在使用数据的时候不会有别的线程修改数据，所以不会添加锁的，只有在更新数据的时候判断之前有没有别的线程更新这个数据。如果这个数据没有被更新，当前线程将自己修改的数据成功写入。如果数据已经被其他线程更新，则根据不同的实现方式执行不同的操作（例如报错或者自动重试）。</p>

<p><strong>实现</strong>
<code class="highlighter-rouge">java.util.concurrent.atomic</code>包下面原子变量类就是乐观锁的一种实现方式</p>

<p><strong>优势</strong>
乐观锁在java中使用<code class="highlighter-rouge">无锁</code>编程来实现,常用CMS算法。
相比较于悲观锁来说，不会带来死锁，饥饿等活性故障问题，线程间相互影响也比悲观锁小，更重要的是：乐观锁因为没有因竞争造成的系统开销，所以性能上也是更胜一筹
当多个线程同时操作一个共享资源时候，只有一个线程会成功，失败的线程不会像悲观锁那样挂起，仅仅是返回，并且系统允许失败的线程重试，也允许自动放弃退出操作。</p>

<p><strong>使用场景</strong> 
乐观锁适合读多写少的场景。</p>

<p><strong>CMS算法(Compare And Swap)</strong>
CMS是乐观锁的核心算法，它包含三个参数，V：共享变量的内存地址，E：期望值(比较值)，B：要写入的新值。
当且仅当V=A成立，CMS算法通过原子方式将B更新V，否则不会执行任何操作。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="rouge-code"><pre><span class="c1">// ----------------- JDK 8 -----------------</span>
<span class="c1">// AtomicInteger 自增方法</span>
<span class="kd">public</span> <span class="kd">final</span> <span class="kt">int</span> <span class="nf">incrementAndGet</span><span class="o">()</span> <span class="o">{</span>
  <span class="k">return</span> <span class="n">unsafe</span><span class="o">.</span><span class="na">getAndAddInt</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">valueOffset</span><span class="o">,</span> <span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
<span class="o">}</span>

<span class="c1">// Unsafe.class</span>
<span class="kd">public</span> <span class="kd">final</span> <span class="kt">int</span> <span class="nf">getAndAddInt</span><span class="o">(</span><span class="nc">Object</span> <span class="n">var1</span><span class="o">,</span> <span class="kt">long</span> <span class="n">var2</span><span class="o">,</span> <span class="kt">int</span> <span class="n">var4</span><span class="o">)</span> <span class="o">{</span>
  <span class="kt">int</span> <span class="n">var5</span><span class="o">;</span>
  <span class="k">do</span> <span class="o">{</span>
      <span class="n">var5</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getIntVolatile</span><span class="o">(</span><span class="n">var1</span><span class="o">,</span> <span class="n">var2</span><span class="o">);</span>
  <span class="o">}</span> <span class="k">while</span><span class="o">(!</span><span class="k">this</span><span class="o">.</span><span class="na">compareAndSwapInt</span><span class="o">(</span><span class="n">var1</span><span class="o">,</span> <span class="n">var2</span><span class="o">,</span> <span class="n">var5</span><span class="o">,</span> <span class="n">var5</span> <span class="o">+</span> <span class="n">var4</span><span class="o">));</span>
  <span class="k">return</span> <span class="n">var5</span><span class="o">;</span>
<span class="o">}</span>

<span class="c1">// ----------------- OpenJDK 8 -----------------</span>
<span class="c1">// Unsafe.java</span>
<span class="kd">public</span> <span class="kd">final</span> <span class="kt">int</span> <span class="nf">getAndAddInt</span><span class="o">(</span><span class="nc">Object</span> <span class="n">o</span><span class="o">,</span> <span class="kt">long</span> <span class="n">offset</span><span class="o">,</span> <span class="kt">int</span> <span class="n">delta</span><span class="o">)</span> <span class="o">{</span>
   <span class="kt">int</span> <span class="n">v</span><span class="o">;</span>
   <span class="k">do</span> <span class="o">{</span>
       <span class="n">v</span> <span class="o">=</span> <span class="n">getIntVolatile</span><span class="o">(</span><span class="n">o</span><span class="o">,</span> <span class="n">offset</span><span class="o">);</span>
   <span class="o">}</span> <span class="k">while</span> <span class="o">(!</span><span class="n">compareAndSwapInt</span><span class="o">(</span><span class="n">o</span><span class="o">,</span> <span class="n">offset</span><span class="o">,</span> <span class="n">v</span><span class="o">,</span> <span class="n">v</span> <span class="o">+</span> <span class="n">delta</span><span class="o">));</span>
   <span class="k">return</span> <span class="n">v</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>获取对象O中的偏移量处的值V，然后断内存中的值是否相等，如果相等设置 v + delta,如果不相等则循环重试，直到设置成功才能退出循环，并且将旧值返回。</p>

<p><strong>缺点</strong></p>
<ul>
  <li>ABA问题。CAS需要在操作值的时候检查内存值是否发生变化，没有发生变化才会更新内存值。但是如果内存值原来是A，后来变成了B，然后又变成了A，那么CAS进行检查时会发现值没有发生变化，但是实际上是有变化的。ABA问题的解决思路就是在变量前面添加版本号，每次变量更新的时候都把版本号加一，这样变化过程就从“A－B－A”变成了“1A－2B－3A”。
    <ul>
      <li>JDK从1.5开始提供了AtomicStampedReference类来解决ABA问题，具体操作封装在compareAndSet()中。compareAndSet()首先检查当前引用和当前标志与预期引用和预期标志是否相等，如果都相等，则以原子方式将引用值和标志的值设置为给定的更新值。</li>
    </ul>
  </li>
  <li>循环时间长开销大。它不能代替堵塞，自旋锁虽然避免了线程切换开销，CAS操作如果长时间不成功，会导致其一直自旋，给CPU带来非常大的开销。</li>
  <li>只能保证一个共享变量的原子操作。对一个共享变量执行操作时，CAS能够保证原子操作，但是对多个共享变量操作时，CAS是无法保证操作的原子性的。
    <ul>
      <li>Java从1.5开始JDK提供了AtomicReference类来保证引用对象之间的原子性，可以把多个变量放在一个对象里来进行CAS操作。</li>
    </ul>
  </li>
</ul>

<h4 id="乐观锁的实现">乐观锁的实现</h4>

<h5 id="1自旋锁">1.自旋锁</h5>

<p><strong>概念</strong>
当一个线程去获取锁的时候，如果锁已经被其他线程获取，那么该线程会循环等待，然后不断的判断锁是否能够被成功获取，直到获取锁才会退出</p>

<p><strong>优势</strong>
不会使线程状态发生切换，线程一直都是activce的；不会使线程进入堵塞状态，减少不必要的上下文切换。</p>

<p><strong>实现方式</strong>
自旋锁的实现原理同样也是CAS，源码中使用do-while循环进行自旋。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="c1">// Unsafe.java</span>
<span class="kd">public</span> <span class="kd">final</span> <span class="kt">int</span> <span class="nf">getAndAddInt</span><span class="o">(</span><span class="nc">Object</span> <span class="n">o</span><span class="o">,</span> <span class="kt">long</span> <span class="n">offset</span><span class="o">,</span> <span class="kt">int</span> <span class="n">delta</span><span class="o">)</span> <span class="o">{</span>
   <span class="kt">int</span> <span class="n">v</span><span class="o">;</span>
   <span class="k">do</span> <span class="o">{</span>
       <span class="n">v</span> <span class="o">=</span> <span class="n">getIntVolatile</span><span class="o">(</span><span class="n">o</span><span class="o">,</span> <span class="n">offset</span><span class="o">);</span>
   <span class="o">}</span> <span class="k">while</span> <span class="o">(!</span><span class="n">compareAndSwapInt</span><span class="o">(</span><span class="n">o</span><span class="o">,</span> <span class="n">offset</span><span class="o">,</span> <span class="n">v</span><span class="o">,</span> <span class="n">v</span> <span class="o">+</span> <span class="n">delta</span><span class="o">));</span>
   <span class="k">return</span> <span class="n">v</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="2适应性自旋锁">2.适应性自旋锁</h5>
<p>JDK 6中变为默认开启，并且引入了自适应的自旋锁（适应性自旋锁）。</p>

<p>自适应意味着自旋的时间（次数）不再固定，而是由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定。如果在同一个锁对象上，自旋等待刚刚成功获得过锁，并且持有锁的线程正在运行中，那么虚拟机就会认为这次自旋也是很有可能再次成功，进而它将允许自旋等待持续相对更长的时间。如果对于某个锁，自旋很少成功获得过，那在以后尝试获取这个锁时将可能省略掉自旋过程，直接阻塞线程，避免浪费处理器资源。</p>

<h4 id="文章引用">文章引用</h4>

<ul>
  <li><a href="https://tech.meituan.com/2018/11/15/java-lock.html">不可不说的Java“锁”事</a></li>
</ul>
:ET