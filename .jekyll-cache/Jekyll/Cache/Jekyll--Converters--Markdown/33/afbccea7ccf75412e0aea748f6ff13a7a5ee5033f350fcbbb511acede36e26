I"#<h2 id="一nio相关">一.Nio相关</h2>
<ul>
  <li><a href="https://blog.csdn.net/skiof007/article/details/52873421">BIO与NIO、AIO的区别(这个容易理解)</a> 
这篇文章很清楚的描述几种IO的区别，也很清楚说明了异步，同步，堵塞，非堵塞的基本概念</li>
  <li><a href="http://jinlipool.com/2018/12/29/scalable-io-in-java">Scalable IO in Java》学习笔记</a></li>
</ul>

<h2 id="二netty源码相关">二.Netty源码相关</h2>

<blockquote>
  <p>一个netty的服务端的例子</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">InterruptedException</span> <span class="o">{</span>
  <span class="nc">EventLoopGroup</span> <span class="n">bossGroup</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">NioEventLoopGroup</span><span class="o">();</span>
  <span class="nc">EventLoopGroup</span> <span class="n">wordGroup</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">NioEventLoopGroup</span><span class="o">();</span>
  <span class="k">try</span> <span class="o">{</span>
    <span class="nc">ServerBootstrap</span> <span class="n">serverBootstrap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ServerBootstrap</span><span class="o">();</span>
    <span class="n">serverBootstrap</span><span class="o">.</span><span class="na">group</span><span class="o">(</span><span class="n">bossGroup</span><span class="o">,</span> <span class="n">wordGroup</span><span class="o">).</span><span class="na">channel</span><span class="o">(</span><span class="nc">NioServerSocketChannel</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
      <span class="o">.</span><span class="na">childHandler</span><span class="o">(</span><span class="k">new</span> <span class="nc">ChannelInitializer</span><span class="o">&lt;</span><span class="nc">SocketChannel</span><span class="o">&gt;()</span> <span class="o">{</span>
        <span class="nd">@Override</span>
        <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">initChannel</span><span class="o">(</span><span class="nc">SocketChannel</span> <span class="n">ch</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
          <span class="nc">ChannelPipeline</span> <span class="n">pipeline</span> <span class="o">=</span> <span class="n">ch</span><span class="o">.</span><span class="na">pipeline</span><span class="o">();</span>
          <span class="o">...</span>
        <span class="o">}</span>
      <span class="o">});</span>

    <span class="nc">ChannelFuture</span> <span class="n">channelFuture</span> <span class="o">=</span> <span class="n">serverBootstrap</span><span class="o">.</span><span class="na">bind</span><span class="o">(</span><span class="mi">8899</span><span class="o">).</span><span class="na">sync</span><span class="o">();</span>
    <span class="n">channelFuture</span><span class="o">.</span><span class="na">channel</span><span class="o">().</span><span class="na">closeFuture</span><span class="o">().</span><span class="na">sync</span><span class="o">();</span>
  <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
    <span class="n">bossGroup</span><span class="o">.</span><span class="na">shutdownGracefully</span><span class="o">();</span>
    <span class="n">wordGroup</span><span class="o">.</span><span class="na">shutdownGracefully</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>无论写简单的还是复杂的netty程序，服务端程序都有以下三个步骤：</p>
<ol>
  <li>定义两个事件循环组，一般来说是NioEventLoopGroup。</li>
  <li>然后使用Netty定义好的服务启动器ServerBootStrap。</li>
  <li>最后在childHandler中定义ChannelInitializer这个类，这个类里面定义的跟我们请求流程有关的handler。</li>
</ol>

<p>Netty开发基本就是这个模板套路,后面的对源码的理解和分析也是基于这个demo的，会有一些扩展的解读文章会在后续补上。</p>

<h4 id="一基本构造方法">一.基本构造方法</h4>
<ul>
  <li><strong><a href="http://jinlipool.com/2019/01/27/netty-1-1-NioEventLoopGroup-construct/">【1-1.Netty源码:NioEventLoopGroup构造方法】</a></strong>
    <ul>
      <li><strong><a href="http://jinlipool.com/2019/01/27/netty-1-1-1-ThreadPerTaskExecutor/">【1-1-1.Netty源码:线程执行器ThreadPerTaskExecutor】</a></strong></li>
    </ul>
  </li>
  <li><strong><a href="http://jinlipool.com/2019/01/27/netty-1-2-ServerBootstrap-construct/">【1-2.Netty源码:构建ServerBootstrap以及它的调用链】</a></strong>
    <ul>
      <li><strong><a href="http://jinlipool.com/2019/01/27/netty-1-2-1-NioServerSocketChannel-construct/">【1-2-1.Netty源码:服务端NioServerSocketChanne构造方法】</a></strong></li>
    </ul>
  </li>
</ul>

<h4 id="二服务端启动">二.服务端启动</h4>
<ul>
  <li><strong><a href="http://jinlipool.com/2019/01/29/netty-2-1-ServerStart/">【2-1.Netty源码:服务端启动】</a></strong>
    <ul>
      <li><strong><a href="http://jinlipool.com/2019/01/29/netty-2-1-1-server-channel-initialization/">【2-1-1.Netty源码:初始化服务端的channel】</a></strong></li>
      <li><strong><a href="http://jinlipool.com/2019/01/29/netty-2-1-2-server-channel-register/">【2-1-2.Netty源码:注册服务端channel】</a></strong></li>
      <li><strong><a href="http://jinlipool.com/2019/01/29/netty-2-1-3-server-socket-bind/">【2-1-3.Netty源码:端口绑定】</a></strong></li>
    </ul>
  </li>
</ul>

<h4 id="三eventloop">三.EventLoop</h4>
<ul>
  <li><strong><a href="http://jinlipool.com/2019/01/30/netty-3-1-evetloop-start/">【3-1.Netty源码:NioEventLoop启动】</a></strong></li>
  <li><strong><a href="http://jinlipool.com/2019/01/30/netty-3-2-evetloop-event-detection/">【3-2.Netty源码:NioEventLoop循环检测事件】</a></strong>
    <ul>
      <li><strong><a href="http://jinlipool.com/2019/01/31/netty-3-2-1-avoid-epoll-bug">【3-2-1.Netty源码:避免空轮循的bug】</a></strong></li>
    </ul>
  </li>
  <li><strong><a href="http://jinlipool.com/2019/01/30/netty-3-3-handle-event/">【3-3.Netty源码:NioEventLoop处理事件】</a></strong></li>
  <li><strong><a href="http://jinlipool.com/2019/01/30/netty-3-4-task.md/">【3-4.Netty源码:任务和定时任务队列】</a></strong></li>
</ul>

<h4 id="四新连接接入">四.新连接接入</h4>
<ul>
  <li><strong><a href="http://jinlipool.com/2019/02/03/netty-4-1-connection-detection/">【4-1.Netty源码:新连接检测】</a></strong>
    <ul>
      <li><strong><a href="http://jinlipool.com/2019/02/03/netty-4-1-1-NioSocketChannel-construct/">【4-1-1.Netty源码:新连接NioSocketChannel 初始化】</a></strong></li>
    </ul>
  </li>
  <li><strong><a href="http://jinlipool.com/2019/02/03/netty-4-2-NioSocketChannel-register/">【4-2.Netty源码:NioSocketChannel的线程分配和selector注册】</a></strong></li>
  <li><strong><a href="http://jinlipool.com/2019/02/03/netty-4-3-NioSocketChannel-read-event-register/">【4-3.Netty源码:NioSocketChannel读事件注册】</a></strong></li>
</ul>

<h3 id="五channelpipeline">五.ChannelPipeline</h3>
<ul>
  <li><strong><a href="http://jinlipool.com/2019/02/09/netty-5-1-Pipeline-initialize/">【5-1.Netty源码:Pipeline初始化】</a></strong></li>
  <li><strong><a href="http://jinlipool.com/2019/02/09/netty-5-2-add-custom-handlers/">【5-2.Netty源码:新增用户自定义ChannelHandler】</a></strong></li>
  <li><strong><a href="http://jinlipool.com/2019/02/09/netty-5-3-InBound-event/">【5-3.Netty源码:InBound事件传播】</a></strong></li>
  <li><strong><a href="http://jinlipool.com/2019/02/10/netty-5-4-OutBound-event/">【5-4.Netty源码:OutBound事件传播】</a></strong></li>
</ul>

<h4 id="扩展">扩展</h4>
<ul>
  <li><strong><a href="http://jinlipool.com/2019/01/28/netty-extend-1-ChannelFuture/">【Netty源码:ChannelFuture】</a></strong></li>
  <li><strong><a href="http://jinlipool.com/2019/02/03/netty-extend-2-ChannelPipeline/">【Netty源码:ChannelPipeline】</a></strong></li>
  <li><strong><a href="http://jinlipool.com/2019/02/07/netty-extend-3-ChannelHandlerContext/">【Netty源码:ChannelHandlerContext】</a></strong></li>
</ul>
:ET